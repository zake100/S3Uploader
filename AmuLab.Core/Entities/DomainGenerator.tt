<#@ include file="OrmLite.Core.ttinclude" #>

<#
	// Settings
	ConnectionStringName = "MainConnectionString";			// Uses last connection string in config if not specified
	Namespace = "AmuLab.Core.Entities";
	ClassPrefix = "";
	ClassSuffix = "";
	bool SplitIntoMultipleFiles = true;		// if true: Generates one file for every class
	bool MakeSingular = false;			// if true: Changes the classname to singular if tablename is not singular
	bool UseIdAsPK = false;				// if true: Changes the primary key property name to Id
	bool GenerateConstructor = false;		// if true: Generates the default empty constructor 

    // Read schema
	var tables = LoadTables(MakeSingular);


/*
	// Tweak Schema
	tables["tablename"].Ignore = true;							// To ignore a table
	tables["tablename"].ClassName = "newname";					// To change the class name of a table
	tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
	tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
	tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/


	// Generate output
	if (tables.Count>0)
	{
#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(Namespace)) Namespace="OrmLitePoco";
var manager = Manager.Create(Host, GenerationEnvironment);
manager.StartHeader(); #>// <auto-generated />

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using System;
using System.Collections.Generic;
using AmuLab.Core.Entities;

namespace <#=Namespace #>
{
<#manager.EndBlock(); #>
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
manager.StartNewFile(TableName2ClassName(tbl.Name.Replace("Tbl", "")) + "Entity.cs");
#>
<# if (MakeSingular) {#>
	
<#}#>
    public partial class <#=TableName2ClassName(tbl.ClassName.Replace("Tbl", ""))#>Entity : BaseEntity
    {
<# if (GenerateConstructor) { #>
		public <#=TableName2ClassName(tbl.ClassName)#>()
		{
		}
<# } #>
<#
foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{
 if ((col.Name!=col.PropertyName) || (col.IsPK && UseIdAsPK)) {  }  #>
<# if (col.IsAutoIncrement) { } #>
<# if (col.IsComputed) { #>
        [Compute]        
<# } #>
<# if (col.IsNullable != true && col.IsAutoIncrement != true) { } #>
<# if (!col.IsPK && col.PropertyName.ToLower() != "created_date" && col.PropertyName.ToLower() != "updated_date"){#>
        public <#=col.ProperPropertyType#> <#=TableName2ClassName(col.PropertyName)#> { get; set;}
<# } #>
<# if (col.IsPK && UseIdAsPK) { } #>
<# if (col.IsPK && !UseIdAsPK){ } #>
<# } #>
    }
<#  manager.EndBlock(); #>
<#  }   #>
<#manager.StartFooter(); #>
}
#pragma warning restore 1591
<#manager.EndBlock(); #>
<#manager.Process(SplitIntoMultipleFiles); #>
<#  }   #>